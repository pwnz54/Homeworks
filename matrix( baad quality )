#include <iostream>
using namespace std;



class matrix
{
	int n;
	int m;
	float* data;
public:
	matrix();
	matrix(int n, int m);
	matrix (const matrix& A);
	matrix operator =(matrix &A)
	{
		delete this->data;
		this->n = A.n;
		this->m = A.m;
		this->data = new float[A.n*A.m];
		for (int i(0); i < A.n*A.m; i++)
		{
			this->data[i] = A.data[i];
		}
		return (*this);
	}
	int getN()
	{
		return this->n;
	}
	int getM()
	{
		return this->m;
	}
	matrix operator* (float c)
	{
		matrix res;
		res.n = this->n;
		res.m = this->m;
		res.data = new float [res.n*res.m];
		for (int i(0); i < res.n*res.m; i++)
		{
			res.data[i] = this->data[i] * c;
		}
		return matrix(res);
	}
	matrix operator* (matrix& A)
	{
		matrix res;
		if ( A.getM() == this->n)
		{
			
			res.n = this->n;
			res.m = A.getM();
			res.data = new float [res.n * res.m];
			float _res = 0;
			for (int i(0); i < this->m; i++)
			{
				
				for (int j(0); j < A.getM(); j++)
					
				{
					_res = _res + this->data[i]*A.data[i];
				
				
				
					res.set(i,j,_res);
				
				}
			}
		}
		return matrix(res);
	}
	float get(int i, int j);
	void set (int i, int j, float data);
	ostream& print (ostream& o)
	{
		for (int i(0); i < n; i++)
		{	
			for (int j(0); j < m; j++)
			{
				o<<this->get(i,j)<<'\t';
			}
			o<<'\n';
		}
		return o;
	}
	istream& read (istream& o)
	{
		int _n, _m;
		o>>_n>>_m;
		this->n = _n;
		this->m = _m;
		data = new float[n*m];
		for (int i(0); i < n; i++)
			for (int j(0); j < m; j++)
			{
				o>>this->data[i*n + j];
			}
		return o;
	}
};
void matrix::set(int i, int j, float data)
{
	this->data[i*n+j] = data;
}
float matrix::get(int i, int j)
{
	return data[i*n+j];
}
matrix::matrix()
{
	n = 0; 
	m = 0;
	data = NULL;
}
matrix::matrix(int n, int m)
{
	this->n = n;
	this->m = m;
	this->data = new float [n*m];
}
matrix::matrix(const matrix &A)
{
	this->n = A.n;
	this->m = A.m;
	this->data = new float[n*m];
	for ( int i(0); i < n*m; i++)
	{
		this->data[i] = A.data[i];
	}

}

int main()
{
	/*matrix A(3,3);
	for (int i(0); i < A.getN(); i++)
		for (int j(0); j < A.getM(); j++)
		{
			A.set(i,j,1.2);
		}
		A.print(cout);*/
	matrix B, C, D;
	B.read(cin);
	C.read(cin);
	B.print(cout);
	cout << endl;
	C.print(cout);
	cout << endl;
	D = B*C;
	D.print(cout);
}
